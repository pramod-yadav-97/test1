# https://medium.com/backticks-tildes/how-to-dockerize-a-django-application-a42df0cb0a99

# The first instruction is what image we want to base our container on
# We Use an official Python runtime as a parent image
FROM python:3.6

# The enviroment variable ensures that the python output is set straight
# to the terminal with out buffering it first
ENV PYTHONUNBUFFERED 1

# create root directory for our project in the container
RUN mkdir /music_service

# Set the working directory to /music_service
WORKDIR /music_service

# Copy the current directory contents into the container at /music_service
ADD . /music_service/

# Install any needed packages specified in requirements.txt
RUN pip install -r requirements.txt



Docker Compose

version: '3'

services:
  web:
    build: .
    command: bash -c "python manage.py makemigrations && python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    container_name: music_service
    volumes:
      - .:/music_service
    ports:
      - "8000:8000"
	  
CMD : docker-compose up/down
	  
# Above WORKS

###############################################

## Creating the image alone 

FROM python:3.6

ENV PYTHONUNBUFFERED 1

RUN mkdir /music

WORKDIR /music/

COPY . /music/

RUN pip install -r requirements.txt

RUN python manage.py makemigrations && python manage.py migrate

EXPOSE 8000

ENTRYPOINT ["python", "manage.py", "runserver", "0.0.0.0:8000"]

##############################################

CMD : docker build -t dj-img .
CMD : docker run -d -p 8000:8000 --name djapp dj-img 



 